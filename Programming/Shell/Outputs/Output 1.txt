
C:\Users\nikit\Documents\Projects\shellclass\localusers>vagrant ssh
==> vagrant: A new version of Vagrant is available: 2.2.16 (installed version: 2.2.15)!
==> vagrant: To upgrade visit: https://www.vagrantup.com/downloads.html

VM must be running to open SSH connection. Run `vagrant up`
to start the virtual machine.

C:\Users\nikit\Documents\Projects\shellclass\localusers>vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==> default: Checking if box 'jasonc/centos7' version '1.4.4' is up to date...
==> default: Clearing any previously set forwarded ports...
==> default: Clearing any previously set network interfaces...
==> default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
==> default: Forwarding ports...
    default: 22 (guest) => 2222 (host) (adapter 1)
==> default: Booting VM...
==> default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: private key
==> default: Machine booted and ready!
==> default: Checking for guest additions in VM...
    default: The guest additions on this VM do not match the installed version of
    default: VirtualBox! In most cases this is fine, but in rare cases it can
    default: prevent things such as shared folders from working properly. If you see
    default: shared folder errors, please make sure the guest additions within the
    default: virtual machine match the version of VirtualBox you have installed on
    default: your host and reload your VM.
    default:
    default: Guest Additions Version: 5.2.6
    default: VirtualBox Version: 6.1
==> default: Mounting shared folders...
    default: /vagrant => C:/Users/nikit/Documents/Projects/shellclass/localusers
==> default: Machine already provisioned. Run `vagrant provision` or use the `--provision`
==> default: flag to force provisioning. Provisioners marked to run always will still run.

C:\Users\nikit\Documents\Projects\shellclass\localusers>
C:\Users\nikit\Documents\Projects\shellclass\localusers>vagrant ssh
Last login: Tue Apr 27 06:26:39 2021 from 10.0.2.2
Last login: Tue Apr 27 06:26:39 2021 from 10.0.2.2
[vagrant@localhost ~]$ dir
[vagrant@localhost ~]$ ls
[vagrant@localhost ~]$ ls -a
.  ..  .bash_history  .bash_logout  .bash_profile  .bashrc  .ssh  .vbox_version  .viminfo
[vagrant@localhost ~]$ vim luser-demo01.sh
[vagrant@localhost ~]$ [vagrant@localhost ~]$ cls
-bash: cls: command not found
[vagrant@localhost ~]$ clear
[vagrant@localhost ~]$ ls -a
.  ..  .bash_history  .bash_logout  .bash_profile  .bashrc  .ssh  .vbox_version  .viminfo
[vagrant@localhost ~]$ vim luser-demo01.sh
[vagrant@localhost ~]$ [vagrant@localhost ~]$ ls -a
.  ..  .bash_history  .bash_logout  .bash_profile  .bashrc  .ssh  .vbox_version  .viminfo
[vagrant@localhost ~]$ touch luser-demo01.sh
[vagrant@localhost ~]$ ls -a
.  ..  .bash_history  .bash_logout  .bash_profile  .bashrc  luser-demo01.sh  .ssh  .vbox_version  .viminfo
[vagrant@localhost ~]$ ./luser-demo01.sh
-bash: ./luser-demo01.sh: Permission denied
[vagrant@localhost ~]$ chmod 755 luser-demo01.sh
[vagrant@localhost ~]$ ./luser-demo01.sh
[vagrant@localhost ~]$ ls -l
total 0
-rwxr-xr-x 1 vagrant vagrant 0 May  7 07:29 luser-demo01.sh
[vagrant@localhost ~]$ vim luser-demo01.sh
[vagrant@localhost ~]$ ls -l
total 0
-rwxr-xr-x 1 vagrant vagrant 0 May  7 07:29 luser-demo01.sh
[vagrant@localhost ~]$ ls -a
.              .bash_logout   luser-demo01.sh  .viminfo
..             .bash_profile  .ssh
.bash_history  .bashrc        .vbox_version
[vagrant@localhost ~]$ vim luser-demo01.sh
[vagrant@localhost ~]$ vim luser-demo01.sh
[vagrant@localhost ~]$ ./luser-demo01.sh
script
$WORD
script
[vagrant@localhost ~]$ vim luser-demo01.sh
[vagrant@localhost ~]$ ./luser-demo01.sh
script
$WORD
script
This is a script
[vagrant@localhost ~]$ vim luser-demo01.sh
[vagrant@localhost ~]$ [vagrant@localhost ~]$ vim luser-demo01./luser-demo01.sh
script
$WORD
script
This is a script
This is a shell script
[vagrant@localhost ~]$ vim luser-demo01.sh
[vagrant@localhost ~]$ ./luser-demo01.sh
script
$WORD
script
This is a script
This is a shell script
This is shell scripting
[vagrant@localhost ~]$ vim luser-demo01.sh
[vagrant@localhost ~]$ [vagrant@localhost ~]$ vim luser-demo01./luser-demo01.sh
script
$WORD
script
This is a script
This is a shell script
This is shell scripting
This is shell
[vagrant@localhost ~]$ vim luser-demo01.sh
[vagrant@localhost ~]$ clear
[vagrant@localhost ~]$ ./luser-demo01.sh
script
$WORD
script
This is a script
This is a shell script
This is shell scripting
This is shell
This is scripted
[vagrant@localhost ~]$ vim luser-demo01.sh
[vagrant@localhost ~]$ ./luser-demo01.sh
script
$WORD
script
This is a script
This is a shell script
This is shell scripting
This is shell
This is scripted
This is scripting
[vagrant@localhost ~]$ vim luser-demo01.sh
[vagrant@localhost ~]$ ./luser-demo01.sh
script
$WORD
script
This is a script
This is a shell script
This is shell scripting
This is shell
This is scripted
This is scripting
You are going to write many scripts in this class
[vagrant@localhost ~]$ vim luser-demo02.sh
[vagrant@localhost ~]$ chmod 755 luser-demo02.sh
[vagrant@localhost ~]$ ./luser-demo02.sh
Your UID is 1000
[vagrant@localhost ~]$ vim luser-demo02.sh
[vagrant@localhost ~]$ man bash
[vagrant@localhost ~]$ echo ${UID}
1000
[vagrant@localhost ~]$ UID='1001'
-bash: UID: readonly variable
[vagrant@localhost ~]$ vim luser-demo02.sh
[vagrant@localhost ~]$ UID='1001'
-bash: UID: readonly variable
[vagrant@localhost ~]$ ./luser-demo02.sh
Your UID is 1000
vagrant
vagrant
[vagrant@localhost ~]$ vim luser-demo02.sh
[vagrant@localhost ~]$ [vagrant@localhost ~]$ ./luser-demo02.sh
Your UID is 1000
Printing the username using the USER_NAME variable: vagrant
vagrant
vagrant
[vagrant@localhost ~]$
[vagrant@localhost ~]$ cls
-bash: cls: command not found
[vagrant@localhost ~]$ clear
[vagrant@localhost ~]$ vim luser-demo02.sh
[vagrant@localhost ~]$ [vagrant@localhost ~]$ clear
[vagrant@localhost ~]$ ./luser-demo02.sh
Your UID is 1000
Printing the username using the USER_NAME variable: vagrant
vagrant
vagrant
Printing username using tilde - older style: vagrant
[vagrant@localhost ~]$ vim luser-demo02.sh
[vagrant@localhost ~]$ [vagrant@localhost ~]$ ./luser-demo02.sh
Your UID is 1000
Printing the username using the USER_NAME variable: vagrant
vagrant
vagrant
Printing username using tilde - older style: vagrant
./luser-demo02.sh: line 25: unexpected token `newline', conditional binary operator expected
./luser-demo02.sh: line 25: syntax error near `"]]'
./luser-demo02.sh: line 25: `if [[ "${UID} -eq 0 "]]'
[vagrant@localhost ~]$ vim luser-demo02.sh
[vagrant@localhost ~]$ ./luser-demo02.sh
Your UID is 1000
Printing the username using the USER_NAME variable: vagrant
vagrant
vagrant
Printing username using tilde - older style: vagrant
You are not root user
[vagrant@localhost ~]$ vim luser-demo02.sh
[vagrant@localhost ~]$ help test
test: test [expr]
    Evaluate conditional expression.

    Exits with a status of 0 (true) or 1 (false) depending on
    the evaluation of EXPR.  Expressions may be unary or binary.  Unary
    expressions are often used to examine the status of a file.  There
    are string operators and numeric comparison operators as well.

    The behavior of test depends on the number of arguments.  Read the
    bash manual page for the complete specification.

    File operators:

      -a FILE        True if file exists.
      -b FILE        True if file is block special.
      -c FILE        True if file is character special.
      -d FILE        True if file is a directory.
      -e FILE        True if file exists.
      -f FILE        True if file exists and is a regular file.
      -g FILE        True if file is set-group-id.
      -h FILE        True if file is a symbolic link.
      -L FILE        True if file is a symbolic link.
      -k FILE        True if file has its `sticky' bit set.
      -p FILE        True if file is a named pipe.
      -r FILE        True if file is readable by you.
      -s FILE        True if file exists and is not empty.
      -S FILE        True if file is a socket.
      -t FD          True if FD is opened on a terminal.
      -u FILE        True if the file is set-user-id.
      -w FILE        True if the file is writable by you.
      -x FILE        True if the file is executable by you.
      -O FILE        True if the file is effectively owned by you.
      -G FILE        True if the file is effectively owned by your group.
      -N FILE        True if the file has been modified since it was last read.

      FILE1 -nt FILE2  True if file1 is newer than file2 (according to
                       modification date).

      FILE1 -ot FILE2  True if file1 is older than file2.

      FILE1 -ef FILE2  True if file1 is a hard link to file2.

    String operators:

      -z STRING      True if string is empty.

      -n STRING
         STRING      True if string is not empty.

      STRING1 = STRING2
                     True if the strings are equal.
      STRING1 != STRING2
                     True if the strings are not equal.
      STRING1 < STRING2
                     True if STRING1 sorts before STRING2 lexicographically.
      STRING1 > STRING2
                     True if STRING1 sorts after STRING2 lexicographically.

    Other operators:

      -o OPTION      True if the shell option OPTION is enabled.
      -v VAR     True if the shell variable VAR is set
      ! EXPR         True if expr is false.
      EXPR1 -a EXPR2 True if both expr1 AND expr2 are true.
      EXPR1 -o EXPR2 True if either expr1 OR expr2 is true.

      arg1 OP arg2   Arithmetic tests.  OP is one of -eq, -ne,
                     -lt, -le, -gt, or -ge.

    Arithmetic binary operators return true if ARG1 is equal, not-equal,
    less-than, less-than-or-equal, greater-than, or greater-than-or-equal
    than ARG2.

    Exit Status:
    Returns success if EXPR evaluates to true; fails if EXPR evaluates to
    false or an invalid argument is given.
[vagrant@localhost ~]$ help |
> ^C
[vagrant@localhost ~]$ man |
> ^C
[vagrant@localhost ~]$ help test |test
[vagrant@localhost ~]$ help test |less
[vagrant@localhost ~]$ [vagrant@localhost ~]$ sudo ./luser-demo02.sh
Your UID is 0
Printing the username using the USER_NAME variable: root
root
root
Printing username using tilde - older style: root
You are root user
[vagrant@localhost ~]$ exit
logout
Connection to 127.0.0.1 closed.

C:\Users\nikit\Documents\Projects\shellclass\localusers>vagrant ssh
Last login: Fri May  7 07:24:30 2021 from 10.0.2.2
Last login: Fri May  7 07:24:30 2021 from 10.0.2.2
[vagrant@localhost ~]$ vim luser-demo02.sh
[vagrant@localhost ~]$ type -a [
[ is a shell builtin
[ is /usr/bin/[
[vagrant@localhost ~]$ vim luser-demo02.sh
[vagrant@localhost ~]$